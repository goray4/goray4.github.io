{"version":3,"sources":["webpack:///./src/templates/TagTemplate.tsx","webpack:///./src/components/Pager.tsx","webpack:///./src/components/ContentList.tsx"],"names":["TagTemplate","props","edges","data","allMdx","pageContext","page","prefix","pageTotal","tag","title","total","to","query","pageUrl","NavLink","Link","Pager","list","item","css","ContentList","map","node","frontmatter","path","key","date"],"mappings":"2FAAA,4IA+BeA,UAhBK,SAACC,GAA4B,IACvCC,EAAUD,EAAME,KAAKC,OAArBF,MADuC,EAEND,EAAMI,YAAvCC,EAFuC,EAEvCA,KAAMC,EAFiC,EAEjCA,OAAQC,EAFyB,EAEzBA,UAAWC,EAFc,EAEdA,IAEjC,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAQC,MAAK,mBAAqBD,EAArB,MACb,8CAA6BA,EAA7B,KACA,YAAC,IAAD,CAAaP,MAAOA,IACpB,YAAC,IAAD,CAAOI,KAAMA,EAAMC,OAAQA,EAAQI,MAAOH,IAC1C,uBACA,YAAC,OAAD,CAAMI,GAAG,SAAT,cAOC,IAAMC,EAAQ,a,wHCvBrB,SAASC,EAAQP,EAAgBD,GAC/B,OAAOA,GAAQ,EAAR,IAAgBC,EAAhB,IAA+BA,EAA/B,IAAyCD,EAGlD,IAAMS,EAAU,YAAOC,OAAP,sBAAH,oMAeAC,EAAQ,SAAC,GAAD,IAAGV,EAAH,EAAGA,OAAQD,EAAX,EAAWA,KAAMK,EAAjB,EAAiBA,MAAjB,OACnB,uBACGL,EAAO,GAAK,YAACS,EAAD,CAASH,GAAIE,EAAQP,EAAQD,EAAO,IAApC,YACZA,EAAOK,GAAS,YAACI,EAAD,CAASH,GAAIE,EAAQP,EAAQD,EAAO,IAApC,W,oCChCrB,wEASMY,EAAO,CAAH,sFAOJC,EAAOC,cAEAC,EAAc,SAAC,GAAD,IAAGnB,EAAH,EAAGA,MAAH,OACzB,kBAAIkB,IAAKF,GACNhB,EAAMoB,KAAI,YAAc,IAAXC,EAAW,EAAXA,KAAW,EACCA,EAAKC,YAArBC,EADe,EACfA,KAAMf,EADS,EACTA,MACd,OACE,kBAAIU,IAAKD,EAAMO,IAAKD,GAClB,YAAC,OAAD,CAAMb,GAAIa,GAAOf,GADnB,KACmCa,EAAKC,YAAYG,KADpD","file":"component---src-templates-tag-template-tsx-1cf41edb0debceeb0e61.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\nimport { TagPageQuery, TagPageQueryVariables } from 'generated/types/gatsby'\nimport { ContentList } from '../components/ContentList'\nimport { Pager } from '../components/Pager'\nimport { Layout } from '../components/Layout'\nimport { ArchivePageContext } from '../context'\n\ninterface TagTemplateProps {\n  readonly data: TagPageQuery\n\n  readonly pageContext: ArchivePageContext & TagPageQueryVariables\n}\n\nconst TagTemplate = (props: TagTemplateProps) => {\n  const { edges } = props.data.allMdx\n  const { page, prefix, pageTotal, tag } = props.pageContext\n\n  return (\n    <Layout>\n      <Helmet title={`Content Tagged \"${tag}\"`} />\n      <h2>{`Content tagged with \"${tag}\"`}</h2>\n      <ContentList edges={edges} />\n      <Pager page={page} prefix={prefix} total={pageTotal} />\n      <hr />\n      <Link to=\"/tags\">All tags</Link>\n    </Layout>\n  )\n}\n\nexport default TagTemplate\n\nexport const query = graphql`\n  query TagPage($tag: String!, $skip: Int!, $limit: Int!) {\n    allMdx(\n      filter: { frontmatter: { draft: { ne: true }, tags: { in: [$tag] } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          frontmatter {\n            date(formatString: \"MMMM D, YYYY\")\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\n\ninterface PagerProps {\n  readonly prefix: string\n  readonly page: number\n  readonly total: number\n}\n\nfunction pageUrl(prefix: string, page: number): string {\n  return page <= 1 ? `/${prefix}` : `/${prefix}/${page}`\n}\n\nconst NavLink = styled(Link)`\n  background-color: #ff5700;\n  border-radius: 3px;\n  color: #fff;\n  font-family: sans-serif;\n  margin: 0 1rem 0 0;\n  padding: 0.25rem 0.5rem;\n  text-decoration: none;\n\n  &:active,\n  &:hover {\n    color: #fff;\n  }\n`\n\nexport const Pager = ({ prefix, page, total }: PagerProps) => (\n  <div>\n    {page > 1 && <NavLink to={pageUrl(prefix, page - 1)}>Previous</NavLink>}\n    {page < total && <NavLink to={pageUrl(prefix, page + 1)}>Next</NavLink>}\n  </div>\n)\n","import React from 'react'\nimport { css } from '@emotion/core'\nimport { IndexPageQuery, TagPageQuery } from 'generated/types/gatsby'\nimport { Link } from 'gatsby'\n\ninterface ContentListProps {\n  readonly edges: IndexPageQuery['allMdx']['edges'] | TagPageQuery['allMdx']['edges']\n}\n\nconst list = css`\n  line-height: 1.8;\n  list-style: none;\n  padding: 0;\n  margin: 1rem 0 2rem;\n`\n\nconst item = css``\n\nexport const ContentList = ({ edges }: ContentListProps) => (\n  <ul css={list}>\n    {edges.map(({ node }) => {\n      const { path, title } = node.frontmatter\n      return (\n        <li css={item} key={path}>\n          <Link to={path}>{title}</Link> ({node.frontmatter.date})\n        </li>\n      )\n    })}\n  </ul>\n)\n"],"sourceRoot":""}