{"version":3,"sources":["webpack:///./src/templates/IndexTemplate.tsx","webpack:///./src/components/Pager.tsx","webpack:///./src/components/ContentList.tsx"],"names":["IndexTemplate","data","pageContext","meta","name","content","edges","allMdx","page","prefix","total","pageTotal","to","query","pageUrl","NavLink","Link","Pager","list","item","css","ContentList","map","node","frontmatter","path","title","key","date"],"mappings":"6FAAA,mIA+BeA,UAhBO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAT,OACpB,YAAC,IAAD,KACE,YAAC,SAAD,CACEC,KAAM,CACJ,CAAEC,KAAM,cAAeC,QAAS,UAChC,CAAED,KAAM,WAAYC,QAAS,wBAGjC,8CACA,YAAC,IAAD,CAAaC,MAAOL,EAAKM,OAAOD,QAChC,YAAC,IAAD,CAAOE,KAAMN,EAAYM,KAAMC,OAAQP,EAAYO,OAAQC,MAAOR,EAAYS,YAC9E,uBACA,YAAC,OAAD,CAAMC,GAAG,SAAT,cAMG,IAAMC,EAAQ,a,wHCvBrB,SAASC,EAAQL,EAAgBD,GAC/B,OAAOA,GAAQ,EAAR,IAAgBC,EAAhB,IAA+BA,EAA/B,IAAyCD,EAGlD,IAAMO,EAAU,YAAOC,OAAP,sBAAH,oMAeAC,EAAQ,SAAC,GAAD,IAAGR,EAAH,EAAGA,OAAQD,EAAX,EAAWA,KAAME,EAAjB,EAAiBA,MAAjB,OACnB,uBACGF,EAAO,GAAK,YAACO,EAAD,CAASH,GAAIE,EAAQL,EAAQD,EAAO,IAApC,YACZA,EAAOE,GAAS,YAACK,EAAD,CAASH,GAAIE,EAAQL,EAAQD,EAAO,IAApC,W,oCChCrB,wEASMU,EAAO,CAAH,sFAOJC,EAAOC,cAEAC,EAAc,SAAC,GAAD,IAAGf,EAAH,EAAGA,MAAH,OACzB,kBAAIc,IAAKF,GACNZ,EAAMgB,KAAI,YAAc,IAAXC,EAAW,EAAXA,KAAW,EACCA,EAAKC,YAArBC,EADe,EACfA,KAAMC,EADS,EACTA,MACd,OACE,kBAAIN,IAAKD,EAAMQ,IAAKF,GAClB,YAAC,OAAD,CAAMb,GAAIa,GAAOC,GADnB,KACmCH,EAAKC,YAAYI,KADpD","file":"component---src-templates-index-template-tsx-d95d63c68ea524f44d39.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport { Helmet } from 'react-helmet'\nimport { IndexPageQuery, IndexPageQueryVariables } from 'generated/types/gatsby'\nimport { ContentList } from '../components/ContentList'\nimport { Pager } from '../components/Pager'\nimport { Layout } from '../components/Layout'\nimport { ArchivePageContext } from '../context'\n\ninterface IndexPageProps {\n  readonly data: IndexPageQuery\n\n  readonly pageContext: ArchivePageContext & IndexPageQueryVariables\n}\n\nconst IndexTemplate = ({ data, pageContext }: IndexPageProps) => (\n  <Layout>\n    <Helmet\n      meta={[\n        { name: 'description', content: 'Sample' },\n        { name: 'keywords', content: 'sample, something' },\n      ]}\n    />\n    <h2>All Markdown Content</h2>\n    <ContentList edges={data.allMdx.edges} />\n    <Pager page={pageContext.page} prefix={pageContext.prefix} total={pageContext.pageTotal} />\n    <hr />\n    <Link to=\"/tags\">All tags</Link>\n  </Layout>\n)\n\nexport default IndexTemplate\n\nexport const query = graphql`\n  query IndexPage($skip: Int!, $limit: Int!) {\n    allMdx(\n      filter: { frontmatter: { draft: { ne: true } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          frontmatter {\n            date(formatString: \"MMMM D, YYYY\")\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\n\ninterface PagerProps {\n  readonly prefix: string\n  readonly page: number\n  readonly total: number\n}\n\nfunction pageUrl(prefix: string, page: number): string {\n  return page <= 1 ? `/${prefix}` : `/${prefix}/${page}`\n}\n\nconst NavLink = styled(Link)`\n  background-color: #ff5700;\n  border-radius: 3px;\n  color: #fff;\n  font-family: sans-serif;\n  margin: 0 1rem 0 0;\n  padding: 0.25rem 0.5rem;\n  text-decoration: none;\n\n  &:active,\n  &:hover {\n    color: #fff;\n  }\n`\n\nexport const Pager = ({ prefix, page, total }: PagerProps) => (\n  <div>\n    {page > 1 && <NavLink to={pageUrl(prefix, page - 1)}>Previous</NavLink>}\n    {page < total && <NavLink to={pageUrl(prefix, page + 1)}>Next</NavLink>}\n  </div>\n)\n","import React from 'react'\nimport { css } from '@emotion/core'\nimport { IndexPageQuery, TagPageQuery } from 'generated/types/gatsby'\nimport { Link } from 'gatsby'\n\ninterface ContentListProps {\n  readonly edges: IndexPageQuery['allMdx']['edges'] | TagPageQuery['allMdx']['edges']\n}\n\nconst list = css`\n  line-height: 1.8;\n  list-style: none;\n  padding: 0;\n  margin: 1rem 0 2rem;\n`\n\nconst item = css``\n\nexport const ContentList = ({ edges }: ContentListProps) => (\n  <ul css={list}>\n    {edges.map(({ node }) => {\n      const { path, title } = node.frontmatter\n      return (\n        <li css={item} key={path}>\n          <Link to={path}>{title}</Link> ({node.frontmatter.date})\n        </li>\n      )\n    })}\n  </ul>\n)\n"],"sourceRoot":""}